2019-11-21 00:02:26 <fizzie> Weird. I've been refactoring umlbox code a little (in preparation for some tweaks), and one thing I changed was to start using "con1=fd:N,fd:M", where N is /dev/null (opened RDWR) and M is the inherited stdout (for capturing the command output).
2019-11-21 00:02:53 <fizzie> Previously it was "con1=null,fd:M", which uses UML's 'null' console type instead, which makes reads block forever.
2019-11-21 00:03:08 <fizzie> Locally this seemed to make commands like "cat" reliably return quickly, instead of waiting for the timeout. But on the bot machine, it's... flaky. Now it's again returning quickly, but earlier I wasn't, even though I changed nothing.
2019-11-21 00:03:12 <fizzie> `cat
2019-11-21 00:03:14 <HackEso> No output.
2019-11-21 00:03:21 <fizzie> Odd.
2019-11-21 00:10:35 Joined: Sgeo
2019-11-21 00:10:35 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, FreeFull, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 00:16:50 <shachaf> I'm at a bookstore and I picked a book semi-randomly and opened it at a page semi-randomly and it talks about ais523.
2019-11-21 00:17:04 <kmc> *blink*
2019-11-21 00:17:06 <kmc> wow
2019-11-21 00:17:21 <shachaf> I mean, it's a book about computability or something, so not that random.
2019-11-21 00:18:13 Quit: FreeFull
2019-11-21 00:18:14 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 01:32:26 Joined: oerjan
2019-11-21 01:32:26 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 01:40:49 User Name: oerjan = oerjan!oerjan@sprocket.nvg.ntnu.no
2019-11-21 01:40:49 <oerjan> ^wiki
2019-11-21 01:40:49 <fungot> https://esolangs.org/wiki/
2019-11-21 01:46:16 <oerjan> b_jonas: oh right, ed doesn't strictly need a terminal.
2019-11-21 01:46:49 <fizzie> oerjan: That one I restored from the logs.
2019-11-21 01:46:49 <oerjan> in fact probably doesn't care
2019-11-21 01:46:59 <oerjan> fizzie: ah
2019-11-21 01:47:22 <oerjan> i saw your message about restoring and wondered how much you'd wiped out
2019-11-21 01:47:24 <oerjan> ^show
2019-11-21 01:47:24 <fungot> echo reverb rev rot13 rev2 fib wc ul cho choo pow2 source help hw srmlebac uenlsbcmra scramble unscramble asc ord prefixes tmp test celebrate wiki chr ha rainbow rainbow2 welcome me tell eval elikoski list ping def a thanks tmp2 8ball rreree rerere botsnack bf
2019-11-21 01:50:23 <oerjan> ^a
2019-11-21 01:50:23 <fungot> ............................................................................................................................................................................................................... ...
2019-11-21 01:50:28 <oerjan> ^show a
2019-11-21 01:50:28 <fungot> +13[.]
2019-11-21 01:50:31 <fizzie> There's a wonky thing umlbox does which is to append a ' | cat' to the command line if the stdout of the call isn't a terminal. I assume that's because from the UML command's perspective /dev/tty1 is always a TTY, even when UML has connected it to a pipe/file.
2019-11-21 01:51:09 <oerjan> mhm
2019-11-21 01:53:44 <fizzie> Hm, I've broken something. :/
2019-11-21 01:55:21 <oerjan> NOOOOOOOOOOOOO
2019-11-21 01:55:45 <fizzie> `` echo foo; echo bar; echo baz
2019-11-21 01:55:46 <HackEso> foo \ bar \ baz
2019-11-21 01:55:48 <fizzie> `` echo foo >&2; echo bar >&2; echo baz >&2
2019-11-21 01:55:48 <HackEso> foo
2019-11-21 01:55:52 <fizzie> That's not right.
2019-11-21 01:58:52 <kmc> o_O
2019-11-21 01:59:05 <fizzie> Oh, that's right, that's one reason why stdout and stderr ordering was pretty wonky even before: the '| cat' thing only deals with stdout, stderr goes directly to /dev/tty1.
2019-11-21 01:59:33 <fizzie> That said, I'm not sure what I managed to break there.
2019-11-21 02:02:49 Quit: joast (Quit: Leaving.)
2019-11-21 02:02:49 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 02:03:35 <oerjan> `` (echo foo; echo bar; echo baz) >&2
2019-11-21 02:03:36 <HackEso> foo
2019-11-21 02:03:44 <oerjan> something EOL handling?
2019-11-21 02:04:00 <oerjan> `` (echo foo; echo bar; echo baz) >&2; echo fizz
2019-11-21 02:04:02 <HackEso> No output.
2019-11-21 02:04:10 <fizzie> Mmmaybe. I don't see how though.
2019-11-21 02:04:14 <oerjan> huh
2019-11-21 02:04:24 <fizzie> I also got two different outputs for the same command before, so there's a race condition somewhere as well.
2019-11-21 02:04:27 <oerjan> `` echo buzz; (echo foo; echo bar; echo baz) >&2; echo fizz
2019-11-21 02:04:27 <HackEso> foo
2019-11-21 02:05:13 <fizzie> I assume it could be the newline translation, it's just odd how that could be affected.
2019-11-21 02:07:41 <fizzie> What the hackbot side does is, `p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True); p.stdin.close(); ret = p.stdout.read(1024)`. No matter how the UML process outputs things, they should all still end up in the same pipe.
2019-11-21 02:09:33 <shachaf> int-e: Hmm, is something like "non-chronological backjumping" actually mandatory when doing clause learning?
2019-11-21 02:09:54 <shachaf> I thought it would be optional but you want to have a reason for every assignment, and if you do regular backtracking, do you even have a reason?
2019-11-21 02:09:56 <fizzie> b
2019-11-21 02:10:24 <shachaf> Also maybe you're tired of random SAT questions, hmm.
2019-11-21 02:11:57 <oerjan> . o O ( do you like random SAT questions? )
2019-11-21 02:12:53 Joined: joast
2019-11-21 02:12:53 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 02:15:07 <fizzie> Yeah, IDGI. Running the umlbox command line for 'echo foo; echo bar; echo baz' and 'echo foo >&2; echo bar >&2; echo baz >&2' manually on the same system, with 1>/tmp/out.1 2>/tmp/out.2, there's no difference: both write exactly the same content into.... ohhh, I get it.
2019-11-21 02:16:03 <fizzie> The bot does a .read() on the stdout pipe. When you're writing to stderr, it probably gets split to multiple writes, which means it only receives the first line.
2019-11-21 02:16:32 <fizzie> But when you write to stdout, it's a fully buffered stream (through the | cat), so it gets the full chunk in one .read().
2019-11-21 02:17:13 <oerjan> fiendish
2019-11-21 02:20:11 <fizzie> I think I can just wrap it in a io.BufferedReader to fix it. Although I still don't know how it actually broke.
2019-11-21 02:23:49 <shachaf> int-e: Wait, maybe I'm just wrong and you can use the conflicting clause.
2019-11-21 02:28:59 <fizzie> Hmm, well, it wasn't that simple. It's true that the .read() call only returns the first line, but then a subsequent .read() actually says it's at EOF. How does that make sense? It doesn't make sense.
2019-11-21 02:30:02 <fizzie> Maybe it could be non-blocking somehow... although I don't think so.
2019-11-21 02:35:02 <fizzie> No, it's not that. If I make umlbox write a line to the file descriptor used before closing it, the bot does read that.
2019-11-21 02:35:25 <fizzie> So it's just that somehow the uml terminates before it has written all the output.
2019-11-21 02:40:35 <fizzie> Super weird. It also happens outside the bot, if I direct the output to a pipe. Immediately after the first line has been written, it terminates. With no messages.
2019-11-21 02:52:44 <oerjan> did this change happen when you upgraded debian, or is there something you actually edited involved?
2019-11-21 02:53:25 <oerjan> fizzie: ^
2019-11-21 02:53:45 <oerjan> because the latter should at least be bisectable...
2019-11-21 02:54:05 <fizzie> Hard to say. People don't usually write to stderr that much. But I can always roll back to an old version and test again.
2019-11-21 02:54:24 <fizzie> Right now I'm getting really bizarre behavior out.
2019-11-21 02:55:12 <oerjan> just change that | cat to |& cat  and call it a day :)
2019-11-21 02:56:03 <shachaf> int-e: Wait, now I'm on the train and it doesn't make sense again.
2019-11-21 02:56:04 <fizzie> It runs using /bin/sh, it doesn't work there. But I did give that a think.
2019-11-21 02:56:16 <fizzie> 2>&1 | cat might work.
2019-11-21 02:57:21 <oerjan> shachaf: that reminds me of something.  oh right, the "i'm on a horse" meme.
2019-11-21 02:57:37 <fizzie> Anyway, the output behaviour is really bizarre. I'm adding printfs here in umlbox init, and only some of them get out, even when I'm not really doing anything special. As soon as it starts to read from the /ubda device, everything goes weird.
2019-11-21 02:58:18 <fizzie> I seem to consistently get all the output from the printfs before the first read, whatever that means.
2019-11-21 02:59:17 <fizzie> Well, except sometimes I don't get even that.
2019-11-21 02:59:26 <shachaf> oerjan: Is that like "I've been through the desert on a horse with no name"?
2019-11-21 03:01:19 <fizzie> I think there might just be some sort of a thing where UML has no way to say "flush everything that has been written to the console/serial channels before terminating" when init calls `sync(); reboot(LINUX_REBOOT_CMD_POWER_OFF);` on it.
2019-11-21 03:02:54 <oerjan> shachaf: probably{, not}
2019-11-21 03:03:11 Joined: imode
2019-11-21 03:03:11 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, imode, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 03:07:52 <fizzie> FWIW, doing '2>&1 | cat' didn't actually fix it. And anyway it's not strictly related to stderr. Here's the behavior I'm consistently getting when doing something close to what the bot is doing: http://ix.io/22oJ
2019-11-21 03:07:56 <fizzie> Does that make any sense?
2019-11-21 03:08:55 <fizzie> (No.)
2019-11-21 03:10:38 <fizzie> Bah. Maybe I'll try the Debian standard 4.19 UML kernel, instead of my home-built 4.9 one. Although I think there must've been some reason why I built my own.
2019-11-21 03:12:01 <shachaf> fizzie: I haven't been reading the whole log. What's with only the first line being printed? Is that the nonsensical thing?
2019-11-21 03:12:27 <fizzie> Well, occasionally it's weirder than that, but yes.
2019-11-21 03:12:40 <shachaf> When is it weirder?
2019-11-21 03:13:06 <fizzie> I don't think I can describe this.
2019-11-21 03:13:10 <shachaf> Is this echo the builtin or /bin/echo? Can you strace it?
2019-11-21 03:13:20 <shachaf> I'm typing on my phone so everything is scow.
2019-11-21 03:13:43 <fizzie> I can't strace UML. I could probably strace inside it, but I'm not sure how much that would help.
2019-11-21 03:13:53 <fizzie> Anyway, I switched to the new UML kernel and now it outputs nothing at all.
2019-11-21 03:13:58 <fizzie> `echo ping
2019-11-21 03:14:00 <HackEso> No output.
2019-11-21 03:14:02 <fizzie> Not great.
2019-11-21 03:14:31 <shachaf> What if you strace inside it? Is it one write call or three?
2019-11-21 03:14:52 <fizzie> Well, I can't, now.
2019-11-21 03:15:29 <fizzie> It just crashes with: Trying to reregister IRQ 2 FD 4 TYPE 0 ID (____ptrval____) \ open(rfile, O_RDONLY): Device or resource busy
2019-11-21 03:18:00 <fizzie> (This is when it's trying to open the tty1 device.)
2019-11-21 03:19:20 <fizzie> Bah, I'll revert back to my own 4.9 version and give up for now. At least it works to some degree. It's not even impossible it's been broken a little like that for long now.
2019-11-21 03:21:06 <fizzie> By the way, it was with the echo builtin; with /bin/echo both the plain and | cat version print all lines.
2019-11-21 03:22:31 <fizzie> Doing strace inside suggests the plain version is three separate writes, with | cat... well, I don't get the strace output, so it's kind of hard to say.
2019-11-21 03:23:05 <shachaf> You can't strace into a file?
2019-11-21 03:23:16 <fizzie> And with /bin/echo I get more of the strace output, but not all of it.
2019-11-21 03:23:28 <shachaf> Is that bash -c /bin/echo or/bin/echo directly?
2019-11-21 03:23:29 <fizzie> I guess I could, I would just need to hostfs mount something in writable form.
2019-11-21 03:24:02 <fizzie> bash -c /bin/echo.
2019-11-21 03:24:32 <shachaf> Maybe your computer's haunted?
2019-11-21 03:26:10 <fizzie> Okay: with bash -c 'echo -e ...', no cat, I get the full output and it got written as three separate writes.
2019-11-21 03:27:12 * oerjan suddenly thinks of the non-inheritable fds mentioned yesterday
2019-11-21 03:27:26 <fizzie> With bash -c 'echo -e ...' and the cat -- and note that this cat is outside the UML kernel, it's just changing the UML's stdout from a (pseudo)terminal to a pipe -- I only get the first line of output, and it was attempted to be written as three separate writes, but the third failed with EPIPE.
2019-11-21 03:27:27 <oerjan> could that be involved?
2019-11-21 03:28:46 <shachaf> What is cat seeing? I guess read 5 and then read 0?
2019-11-21 03:28:55 <shachaf> EPIPE is odd.
2019-11-21 03:29:13 <fizzie> With bash -c /bin/echo, I sometimes get no output at all, and a single write of the whole 15 bytes which fails with EIO.
2019-11-21 03:29:39 <fizzie> And occasionally I get the full output, and three separate writes of 5 bytes each.
2019-11-21 03:29:49 <shachaf> OK, I'm spooked.
2019-11-21 03:30:06 <fizzie> And the last combination, /bin/echo with cat, seems to consistently produce all three lines of output.
2019-11-21 03:30:17 <fizzie> Written in a single 15-byte write.
2019-11-21 03:30:49 <fizzie> I don't think I've even seen EIO before.
2019-11-21 03:30:54 <shachaf> What's closing the pipe?
2019-11-21 03:31:16 <oerjan> (gremlins)
2019-11-21 03:32:34 <fizzie> The umlbox wrapper script does close the file descriptor, but that's supposedly the write end of the pipe, and anyway should only happen after the UML kernel process has terminated and been wait'd for.
2019-11-21 03:32:41 <fizzie> Let me strace that cat on the outside too.
2019-11-21 03:32:42 <kmc> EIEIO
2019-11-21 03:33:27 <oerjan> <kspalaiologos> `quote 1000 <-- enough quotes have been deleted that numbers aren't remotely stable
2019-11-21 03:34:02 <oerjan> . o O ( kmcdonald had a farm )
2019-11-21 03:34:54 <kmc> lol
2019-11-21 03:34:58 <fizzie> Okay, built-in echo with cat. Saw one line of output. Inside, bash did three write calls of 5 bytes each; first two returned 5, the last returned -1 EPIPE. Outside, the cat did one read(0, "foo1\n", 131072) and got 5 bytes, then the next read returned 0/EOF.
2019-11-21 03:36:04 <fizzie> I've no idea what could be closing the pipe. The only people who should even have access to the read end of the pipe would be cat (which doesn't seem to be closing it) and bash (which I assume wouldn't do it without a good reason).
2019-11-21 03:36:30 <fizzie> The umlbox wrapper script, and the UML kernel, should only have a file descriptor for the write end.
2019-11-21 03:36:35 <oerjan> `doag ../quotes | grep 1000
2019-11-21 03:36:38 <HackEso> No output.
2019-11-21 03:37:11 <fizzie> Really going to give up for now though. It's late. There's ghosts about.
2019-11-21 03:37:16 <oerjan> `` doag ../quotes | paste
2019-11-21 03:37:19 <HackEso> https://hack.esolangs.org/tmp/paste/paste.20469
2019-11-21 03:38:11 <fizzie> I strongly suspect it's some UML weirdness, after all, init will tell the kernel to power off right after the command finishes. I might need some sort of synchronization mechanism here.
2019-11-21 03:38:33 <oerjan> `quote steal.code
2019-11-21 03:38:33 <HackEso> No output.
2019-11-21 03:38:44 <oerjan> `quote steal..code
2019-11-21 03:38:45 <HackEso> 687) <olsner> what a world it would be if you could actually *steal* code so that the other project has to rewrite it or infiltrate your project to steal it back
2019-11-21 03:38:59 <oerjan> hm that's older, so it _should_ be in the paste
2019-11-21 03:39:08 <fizzie> (Incidentally, sleep is also behaving super-weirdly inside the UML. If I stick a 'sleep 1;' in front, there's never any output. And the sleep durations never seem to actually match the designated amount of seconds.)
2019-11-21 03:42:02 <oerjan> i vaguely think someone used sleep in HackEso not that long ago
2019-11-21 03:45:54 <oerjan> kspalaiologos: https://esolangs.org/logs/2013-03-30.html#luq
2019-11-21 03:46:13 <oerjan> it was actually quote 1000 itself when added
2019-11-21 03:46:20 <oerjan> and still not cheating
2019-11-21 03:46:53 <shachaf> Maybe you'll understand this better if you draw a UML diagram.
2019-11-21 03:47:56 <oerjan> so: we had 1000 quotes back in early 2013, and currently have fewer than 337 more.
2019-11-21 03:48:08 <oerjan> `` allquotes | tail -n 1
2019-11-21 03:48:10 <HackEso> No output.
2019-11-21 03:48:18 <oerjan> what
2019-11-21 03:48:47 <oerjan> `` allquote | head -n 1
2019-11-21 03:48:48 <HackEso> ​/hackenv/bin/`: line 5: allquote: command not found
2019-11-21 03:48:53 <oerjan> `` allquotes | head -n 1
2019-11-21 03:48:54 <HackEso> 1) <Slereah> EgoBot just opened a chat session with me to say "bork bork bork"
2019-11-21 03:48:57 <fizzie> Maybe that's just more ghosts?
2019-11-21 03:49:03 <oerjan> `` allquotes | tail -n 1
2019-11-21 03:49:04 <HackEso> 1332) <shachaf> The domain is public, but what's the codomain?
2019-11-21 03:49:09 <oerjan> apparently so.
2019-11-21 03:49:41 <oerjan> so it's definitely not been that broken for long.
2019-11-21 03:50:34 <fizzie> I'll try older versions later.
2019-11-21 03:51:31 <fizzie> An alternative solution also occurs to me: instead of trying to use the UML console channels, I could use the block devices. That way there's a chance the sync will make it robust. It's not like I need the interactivety. Although umlbox itself is designed for potential interactive use.
2019-11-21 03:52:09 <oerjan> `` allquotes | tail -n 1
2019-11-21 03:52:11 <HackEso> 1332) <shachaf> The domain is public, but what's the codomain?
2019-11-21 03:52:29 <shachaf> That quote is terrible.
2019-11-21 03:52:46 <shachaf> Maybe delete it or pick some other quote to keep quoting?
2019-11-21 03:53:10 <oerjan> well i was really just checking how many quotes there were, and then a bug turned up.
2019-11-21 03:54:32 <oerjan> ok i did 3 repeats in pm, and the last one failed.
2019-11-21 03:54:48 <oerjan> (the second was a little slow.)
2019-11-21 03:55:15 Quit: imode (Ping timeout: 240 seconds)
2019-11-21 03:55:15 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, kspalaiologos, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 03:55:45 <oerjan> maybe it's timing out and it's related to the sleep thing
2019-11-21 03:56:16 <oerjan> `cat
2019-11-21 03:57:03 <fizzie> That always seems to take more time than the stipulated 30 seconds.
2019-11-21 03:57:40 <HackEso> No output.
2019-11-21 03:57:47 <oerjan> i was sort of hoping it might time out early and be a clue
2019-11-21 03:57:49 <oerjan> `` echo hi; cat
2019-11-21 03:57:51 <HackEso> No output.
2019-11-21 03:57:54 <oerjan> ooh
2019-11-21 03:57:58 <oerjan> so it was
2019-11-21 03:58:11 <oerjan> but i had to print something first
2019-11-21 03:58:56 <oerjan> fizzie: in case you weren't watching, that last command responded almost instantly
2019-11-21 03:59:25 <fizzie> And didn't print the thing.
2019-11-21 04:00:03 <fizzie> Shouldn't have anything to do with the timeout though.
2019-11-21 04:00:46 <oerjan> no, more the reverse: it shows that it's aborted first.
2019-11-21 04:01:52 <oerjan> `` echo hi; echo ho; cat
2019-11-21 04:02:10 <oerjan> and now it's going to take the full time i guess
2019-11-21 04:02:56 <HackEso> No output.
2019-11-21 04:03:04 <oerjan> ...but still didn't print
2019-11-21 04:03:16 <oerjan> very random.
2019-11-21 04:03:57 <oerjan> `1 quote random
2019-11-21 04:03:58 <HackEso> 1/5:
2019-11-21 04:04:07 <oerjan> `n 1
2019-11-21 04:04:09 <HackEso> 1/5:
2019-11-21 04:04:18 <oerjan> `n 1
2019-11-21 04:04:18 <HackEso> 1/5:
2019-11-21 04:04:21 <oerjan> `n
2019-11-21 04:04:22 <HackEso> 2/5:
2019-11-21 04:04:24 <oerjan> huh
2019-11-21 04:04:41 <shachaf> Probably closing after the first write?
2019-11-21 04:05:04 <oerjan> apparently. but it hasn't been doing that since fizzie upgraded debian, has it?
2019-11-21 04:05:21 <shachaf> I don't know what's going on at all.
2019-11-21 04:05:27 <shachaf> I'm at the airport.
2019-11-21 04:09:24 <oerjan> hm i find only one <HackEso> 1/...: response after i asked fizzie about "draft", which i assume was after the upgrade. although that one worked.
2019-11-21 04:09:49 <oerjan> `1 stat le
2019-11-21 04:09:50 <HackEso> No output.
2019-11-21 04:09:54 <oerjan> `1 stat le
2019-11-21 04:09:55 <HackEso> 1/1:
2019-11-21 04:09:59 <oerjan> `1 stat le
2019-11-21 04:10:00 <HackEso> 1/1:
2019-11-21 04:10:12 <oerjan> so something changed after that, probably
2019-11-21 04:13:43 <oerjan> lately people don't seem to be following the old "show 5 quotes, delete at most 1" tradition, but just deleting things outright, so the quotes db might even continue shrinking.
2019-11-21 04:20:56 <fizzie> I don't understand why it would only work for the one write.
2019-11-21 04:24:43 <fizzie> `` /bin/echo a; /bin/echo b; /bin/echo c; /bin/echo d; /bin/echo e
2019-11-21 04:24:44 <HackEso> a \ b \ c \ d \ e
2019-11-21 04:24:48 <fizzie> `` /bin/echo a; /bin/echo b; /bin/echo c >&2; /bin/echo d; /bin/echo e
2019-11-21 04:24:49 <HackEso> c
2019-11-21 04:25:12 <oerjan> <shachaf> I'm at a bookstore and I picked a book semi-randomly and opened it at a page semi-randomly and it talks about ais523. <-- synchronicity hth
2019-11-21 04:25:17 <fizzie> And there's that, which seems to behave very consistently.
2019-11-21 04:26:01 <oerjan> `cat spout
2019-11-21 04:26:04 <HackEso> No output.
2019-11-21 04:26:06 <oerjan> huh
2019-11-21 04:26:15 <oerjan> `cat spout
2019-11-21 04:26:15 <HackEso> ​  File: le -> /hackenv/le \   Size: 11        	Blocks: 0          IO Block: 1024   symbolic link \ Device: 12h/18d	Inode: 1206924     Links: 1 \ Access: (0777/lrwxrwxrwx)  Uid: ( 1000/ UNKNOWN)   Gid: ( 1000/ UNKNOWN) \ Access: 2019-11-16 21:29:43.000000000 +0000 \ Modify: 2019-11-16 21:29:43.000000000 +0000 \ Change: 2019-11-16 21:29:43.000000000 +0000 \  Birth: -
2019-11-21 04:27:59 <oerjan> `n
2019-11-21 04:27:59 <HackEso> 1/1:
2019-11-21 04:28:05 <oerjan> `` n
2019-11-21 04:28:08 <HackEso> No output.
2019-11-21 04:28:10 <fizzie> It would make some sense if it was the "bot framework does only one read, then closes the pipe" issue, but it was clearly receiving EOF right after.
2019-11-21 04:28:29 <oerjan> `` n | cat
2019-11-21 04:28:30 <HackEso> No output.
2019-11-21 04:28:40 <oerjan> `` n | cat
2019-11-21 04:28:41 <HackEso> 1/1:  File: le -> /hackenv/le \   Size: 11        	Blocks: 0          IO Block: 1024   symbolic link \ Device: 12h/18d	Inode: 1206924     Links: 1 \ Access: (0777/lrwxrwxrwx)  Uid: ( 1000/ UNKNOWN)   Gid: ( 1000/ UNKNOWN) \ Access: 2019-11-16 21:29:43.000000000 +0000 \ Modify: 2019-11-16 21:29:43.000000000 +0000 \ Change: 2019-11-16 21:29:43.000000000 +0000 \  Birth: -
2019-11-21 04:29:20 <fizzie> Is it possible that it gets an eof whenever any executable closes the output pipe, and that's where it decides to stop reading?
2019-11-21 04:29:59 <shachaf> fizzie: I was going to ask earlier what happens if cat keeps issuing read calls after the 0.
2019-11-21 04:30:08 <shachaf> But I thought that'd be too niche a guess and too annoying to test.
2019-11-21 04:30:09 <oerjan> `` 1 echo a; 1 echo b; 1 echo c; 1 echo d; 1 echo e
2019-11-21 04:30:21 <HackEso> No output.
2019-11-21 04:30:31 <oerjan> `cat spout
2019-11-21 04:30:32 <HackEso> No output.
2019-11-21 04:30:34 <oerjan> `cat spout
2019-11-21 04:30:35 <HackEso> No output.
2019-11-21 04:30:37 <oerjan> `cat spout
2019-11-21 04:30:37 <HackEso> No output.
2019-11-21 04:30:42 <oerjan> `` ls -l spout
2019-11-21 04:30:44 <HackEso> No output.
2019-11-21 04:30:47 <oerjan> `` ls -l spout
2019-11-21 04:30:48 <HackEso> No output.
2019-11-21 04:30:51 <oerjan> OH COME ON
2019-11-21 04:31:04 <oerjan> `` ls -l spout | cat
2019-11-21 04:31:05 <HackEso> ​-rw-r--r-- 1 1000 1000 0 Nov 21 04:30 spout
2019-11-21 04:31:18 <oerjan> `` cat spout | cat
2019-11-21 04:31:19 <HackEso> No output.
2019-11-21 04:31:24 <oerjan> `` cat spout | cat
2019-11-21 04:31:25 <HackEso> No output.
2019-11-21 04:31:32 <oerjan> `` wc spout
2019-11-21 04:31:33 <HackEso> 0 0 0 spout
2019-11-21 04:31:35 <oerjan> oh
2019-11-21 04:31:54 <oerjan> ok interesting, it failed at writing the spout file
2019-11-21 04:34:03 <oerjan> `` (1 echo a; 1 echo b; 1 echo c; 1 echo d; 1 echo e) >/dev/null
2019-11-21 04:34:10 <HackEso> No output.
2019-11-21 04:34:20 <oerjan> `cat spout
2019-11-21 04:34:21 <HackEso> No output.
2019-11-21 04:34:27 <oerjan> `` wc spout
2019-11-21 04:34:28 <HackEso> 0 0 0 spout
2019-11-21 04:34:37 <oerjan> hum
2019-11-21 04:35:01 <oerjan> that means that command failed somewhere, despite never printing to stdout
2019-11-21 04:35:58 <oerjan> `` { 1 echo a; 1 echo b; 1 echo c; 1 echo d; 1 echo e } >/dev/null
2019-11-21 04:35:59 <HackEso> ​/hackenv/bin/`: eval: line 6: syntax error: unexpected end of file
2019-11-21 04:36:19 <oerjan> hum
2019-11-21 04:36:34 <oerjan> `` (1 echo a) >/dev/null
2019-11-21 04:36:36 <HackEso> No output.
2019-11-21 04:36:37 Quit: kspalaiologos (Ping timeout: 240 seconds)
2019-11-21 04:36:37 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 04:36:40 <oerjan> `cat spout
2019-11-21 04:36:40 <HackEso> No output.
2019-11-21 04:36:52 <oerjan> oh wait duh
2019-11-21 04:37:45 <oerjan> `` 1 'echo a'; 1 'echo b'; 1 'echo c'; 1 'echo d'; 1 'echo e'
2019-11-21 04:37:48 <HackEso> 1/1:a \ 1/1:b \ 1/1:c \ 1/1:d \ 1/1:e
2019-11-21 04:38:01 <oerjan> darn
2019-11-21 04:38:09 <oerjan> `cbt 1
2019-11-21 04:38:10 <HackEso> ​\` "$@" |& sport
2019-11-21 04:38:31 <oerjan> hum that should pass on everything
2019-11-21 04:38:35 <oerjan> `cbt `
2019-11-21 04:38:35 <HackEso> ​#!/bin/bash \ cmd="${1-quote}" \ TIMEFORMAT="real: %lR, user: %lU, sys: %lS" \ shopt -s extglob globstar \ eval -- "$cmd" | rnooodl
2019-11-21 04:39:28 <oerjan> `slbd `//s,1,@,
2019-11-21 04:39:30 <HackEso> ​`//#!/bin/bash \ cmd="${@-quote}" \ TIMEFORMAT="real: %lR, user: %lU, sys: %lS" \ shopt -s extglob globstar \ eval -- "$cmd" | rnooodl
2019-11-21 04:39:37 <oerjan> `` echo hi
2019-11-21 04:39:37 <HackEso> hi
2019-11-21 04:40:07 <oerjan> `` 1 echo a; 1 echo b; 1 echo c; 1 echo d; 1 echo e
2019-11-21 04:40:15 <HackEso> No output.
2019-11-21 04:40:23 <fizzie> I'll try to roll back the live version to the post-Debian-upgrade-before-refactoring one.
2019-11-21 04:40:25 <oerjan> or not.
2019-11-21 04:40:48 <oerjan> `` 1 echo a; 1 echo b; 1 echo c; 1 echo d; 1 echo e
2019-11-21 04:40:51 <HackEso> No output.
2019-11-21 04:41:06 <oerjan> `` \` echo hi
2019-11-21 04:41:07 <HackEso> hi
2019-11-21 04:41:14 <oerjan> ok seems to work
2019-11-21 04:41:41 <oerjan> `` 1 echo hi
2019-11-21 04:41:42 <HackEso> 1/1:hi
2019-11-21 04:42:04 <oerjan> `` 1 echo a; 1 echo b; 1 echo c; 1 echo d; 1 echo e
2019-11-21 04:42:10 <HackEso> 1/1:a \ 1/1:b \ 1/1:c \ 1/1:d \ 1/1:e
2019-11-21 04:42:27 <oerjan> `cat spout
2019-11-21 04:42:27 <HackEso> e
2019-11-21 04:43:18 <fizzie> `` /bin/echo a; /bin/echo b; /bin/echo c >&2; /bin/echo d; /bin/echo e
2019-11-21 04:43:19 <HackEso> c \ a \ b \ d \ e
2019-11-21 04:43:25 <oerjan> ok that was just me being stupid but now 1 and ` are a bit more resilient in shell
2019-11-21 04:43:26 <fizzie> Well, there's clearly some difference there.
2019-11-21 04:43:45 <fizzie> Oh well, at least I can bisect for it then. But not today.
2019-11-21 04:43:54 <fizzie> Need to wake up in four hours.
2019-11-21 04:44:06 <oerjan> sweet dreams
2019-11-21 04:49:16 <kmc> `` url $(which 1)
2019-11-21 04:49:17 <HackEso> https://hack.esolangs.org/repo/file/tip/bin/1
2019-11-21 04:52:52 Joined: TellsTogo
2019-11-21 04:52:53 Names: \oren\, ^[, aji, aloril, APic, atriq, b_jonas, bfbot, Bowserinator, BWBellairs, Cale, catern, clog, ddmm, Deewiant, diginet, dingwat, divergence, djhoulihan, dnm, dog_star, economicsbat, erdic, esowiki, FireFly, fizzie, fungot, GeekDude, gitlogger, glowcoil, grumble, haavard, HackEso, hakatashi1, heroux, Hooloovo0, howlands, iczero, int-e, interruptinuse, iovoid, j-bot, j4cbo, jix, joast, kingoffrance, kmc, laerling, lambdabot, LBPHacker, lf94, lifthrasiir, Lykaina, Lymia, lynn, MDude, Melvar, mich181189, mniip, moony, myname, myndzi, ocharles, oerjan, olsner, ornxka, paul2520, pikhq, ProofTechnique, quintopia, relrod, rodgort, Scrooge, sebbu, sftp, Sgeo, shachaf, shig, shikhin, ski, sleepnap, Soni, sparr, sprocklem, stux|away, subleq, TellsTogo, trn, tromp, tswett[m], vertrex, Vorpal, wmww, zemhill, zzo38
2019-11-21 04:56:34 <kingoffrance> for a second it almost looked like the "tip" command was in operation, in all its glory :/
2019-11-21 04:56:46 <kingoffrance> alas, just a directory name
2019-11-21 04:59:20 <esowiki> 14[[07User:Quadril-Is14]]4 10 02https://esolangs.org/w/index.php?diff=67294&oldid=67134 5* 03Quadril-Is 5* (+14) 10
